{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/Button\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function Register(_ref) {\n  var navigation = _ref.navigation;\n\n  var storeData = function storeData(values) {\n    var email, password;\n    return _regeneratorRuntime.async(function storeData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = values.email, password = values.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@user_name', email));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@password', password));\n\n          case 6:\n            navigation.navigate('TDEE Calculator');\n            _context.next = 11;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  var LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string().min(2, 'Too Short!').max(10, 'Too Long!').required('Required')\n  });\n\n  var _useFormik = useFormik({\n    validationSchema: LoginSchema,\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    onSubmit: function onSubmit(values) {\n      storeData(values);\n    }\n  }),\n      handleChange = _useFormik.handleChange,\n      handleSubmit = _useFormik.handleSubmit,\n      handleBlur = _useFormik.handleBlur,\n      values = _useFormik.values,\n      errors = _useFormik.errors,\n      touched = _useFormik.touched;\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: '#223e4b',\n      fontSize: 20,\n      marginBottom: 16\n    }\n  }, \"Register\"), React.createElement(View, {\n    style: {\n      paddingHorizontal: 32,\n      marginBottom: 16,\n      width: '100%'\n    }\n  }, React.createElement(TextInput, {\n    icon: \"mail\",\n    placeholder: \"Enter your email\",\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    keyboardType: \"email-address\",\n    keyboardAppearance: \"dark\",\n    returnKeyType: \"next\",\n    returnKeyLabel: \"next\",\n    onChangeText: handleChange('email'),\n    onBlur: handleBlur('email'),\n    error: errors.email,\n    touched: touched.email\n  })), React.createElement(View, {\n    style: {\n      paddingHorizontal: 32,\n      marginBottom: 16,\n      width: '100%'\n    }\n  }, React.createElement(TextInput, {\n    icon: \"key\",\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    autoCompleteType: \"password\",\n    autoCapitalize: \"none\",\n    keyboardAppearance: \"dark\",\n    returnKeyType: \"go\",\n    returnKeyLabel: \"go\",\n    onChangeText: handleChange('password'),\n    onBlur: handleBlur('password'),\n    error: errors.password,\n    touched: touched.password\n  })), React.createElement(Button, {\n    label: \"Register\",\n    onPress: handleSubmit\n  }));\n}","map":{"version":3,"sources":["/Users/manav/Documents/study/Fall 2021 Queens College/CSCI 370 /git-repo/screens/Register.js"],"names":["React","useFormik","Yup","TextInput","Button","AsyncStorage","Register","navigation","storeData","values","email","password","setItem","navigate","LoginSchema","object","shape","string","required","min","max","validationSchema","initialValues","onSubmit","handleChange","handleSubmit","handleBlur","errors","touched","flex","backgroundColor","alignItems","justifyContent","color","fontSize","marginBottom","paddingHorizontal","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View } from 'react-native';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport TextInput from '../components/TextInput';\nimport Button from '../components/Button';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport default function Register({ navigation }) {\n    const storeData = async (values) => {\n        const {email,password} =values;\n        try {\n          await AsyncStorage.setItem('@user_name', email);\n          await AsyncStorage.setItem('@password', password);\n          navigation.navigate('TDEE Calculator');\n        } catch (e) {\n          // saving error\n        }\n      }\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .min(2, 'Too Short!')\n      .max(10, 'Too Long!')\n      .required('Required')\n  });\n  const {\n    handleChange,\n    handleSubmit,\n    handleBlur,\n    values,\n    errors,\n    touched\n  } = useFormik({\n    validationSchema: LoginSchema,\n    initialValues: { email: '', password: '' },\n    onSubmit: (values)=>{storeData(values)}\n  });\n  \n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n    >\n      <Text style={{ color: '#223e4b', fontSize: 20, marginBottom: 16 }}>\n        Register\n      </Text>\n      <View style={{ paddingHorizontal: 32, marginBottom: 16, width: '100%' }}>\n        <TextInput\n          icon='mail'\n          placeholder='Enter your email'\n          autoCapitalize='none'\n          autoCompleteType='email'\n          keyboardType='email-address'\n          keyboardAppearance='dark'\n          returnKeyType='next'\n          returnKeyLabel='next'\n          onChangeText={handleChange('email')}\n          onBlur={handleBlur('email')}\n          error={errors.email}\n          touched={touched.email}\n        />\n      </View>\n      <View style={{ paddingHorizontal: 32, marginBottom: 16, width: '100%' }}>\n        <TextInput\n          icon='key'\n          placeholder='Password'\n          secureTextEntry\n          autoCompleteType='password'\n          autoCapitalize='none'\n          keyboardAppearance='dark'\n          returnKeyType='go'\n          returnKeyLabel='go'\n          onChangeText={handleChange('password')}\n          onBlur={handleBlur('password')}\n          error={errors.password}\n          touched={touched.password}\n        />\n      </View>\n      <Button label='Register' onPress={handleSubmit} />\n    </View>\n  );\n}"]},"metadata":{},"sourceType":"module"}